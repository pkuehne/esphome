name: Publish Release

on:
  release:
    types: [published]

jobs:
  cpp-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Cache pip modules
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: esphome-pip-3.8-${{ hashFiles('setup.py') }}
          restore-keys: |
            esphome-pip-
      - name: Cache Platformio
        uses: actions/cache@v1
        with:
          path: ~/.platformio
          key: esphome-platformio
      - name: Setup environment
        run: |
          script/setup
          pio init --ide atom
      - name: Lint Cpp Code
        uses: esphome/esphome-lint-action@v1
        with:
          run: |
            script/clang-tidy --all-headers --fix
            script/clang-format -i
            script/ci-suggest-changes

  python-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Cache pip modules
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: esphome-pip-3.7-${{ hashFiles('setup.py') }}
          restore-keys: |
            esphome-pip-
      - name: Cache Platformio
        uses: actions/cache@v1
        with:
          path: ~/.platformio
          key: esphome-platformio
      - name: Setup environment
        run: |
          script/setup
      - name: Lint Python
        run: |
          script/ci-custom.py
          flake8 esphome
          pylint esphome

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
          test:
          - test1
          - test2
          - test3
          - test4
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.6'
      - name: Cache pip modules
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: esphome-pip-3.6-${{ hashFiles('setup.py') }}
          restore-keys: |
            esphome-pip-
      - name: Cache Platformio
        uses: actions/cache@v1
        with:
          path: ~/.platformio
          key: esphome-platformio
      - name: Setup environment
        run: |
          script/setup
      - run: |
          esphome tests/${{ matrix.test }}.yaml compile

  deploy-pypi:
    name: Build and publish to PyPi
    needs: [cpp-lint, python-lint, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          script/setup
          pip install setuptools wheel twine
      - name: Build and push
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          python setup.py sdist bdist_wheel
          twine upload dist/*

  deploy-docker:
    name: Build and publish docker containers
    runs-on: ubuntu-latest
    needs: [cpp-lint, python-lint, test]
    strategy:
      matrix:
        arch: [amd64, i386, armv7, aarch64]
        build_type: ["hassio", "docker"]
    steps:
      - uses: actions/checkout@v2
      - run: |
          tag="${GITHUB_REF#v}"
          base_version="2.0.1"

          if [[ "${{ matrix.build-type }}" == "hassio" ]]; then
            build_from="esphome/esphome-hassio-base-${arch}:${base_version}"
            build_to="esphome/esphome-hassio-${arch}"
            dockerfile="docker/Dockerfile.hassio"
          else
            build_from="esphome/esphome-base-${arch}:${base_version}"
            build_to="esphome/esphome-${arch}"
            dockerfile="docker/Dockerfile"
            if [[ "${arch}" == "amd64" ]]; then
              build_to="esphome/esphome"
            fi
          fi
          echo "::set-env name=TAG::${tag}"
          echo "::set-env name=BUILD_FROM::${build_from}"
          echo "::set-env name=BUILD_TO::${build_to}"
          echo "::set-env name=IMAGE::${build_to}:${tag}"
          echo "::set-env name=DOCKERFILE::${dockerfile}"
      - run: |
          docker run --rm --privileged multiarch/qemu-user-static:register

          docker build \
            --build-arg "BUILD_FROM=${BUILD_FROM}" \
            --build-arg "BUILD_VERSION=${TAG}" \
            --tag "${IMAGE}" \
            --file "${DOCKERFILE}" \
            .
      - env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD"
      - run: |
          docker push "${IMAGE}"
      - if: ${{ !github.event.release.prerelease) }}
        run: |
          docker tag "${IMAGE}" ${BUILD_TO}:latest
          docker push "${BUILD_TO}:latest"
      - if: ${{ github.event.release.prerelease) }}
        run: |
          docker tag "${IMAGE}" ${BUILD_TO}:beta
          docker push "${BUILD_TO}:beta"

  deploy-docker-manifest:
    runs-on: ubuntu-latest
    needs: [deploy-docker]
    steps:
    - run: |
        mkdir -p ~/.docker
        echo "{\"experimental\": \"enabled\"}" > ~/.docker/config.json
    - env:
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD"
    - run: |
        REPO=esphome/esphome
        tag="${GITHUB_REF#v}"

        docker manifest create ${REPO}:${tag} \
          ${REPO}-aarch64:${tag} \
          ${REPO}-amd64:${tag} \
          ${REPO}-armv7:${tag} \
          ${REPO}-i386:${tag}
        echo "Pushing to ${REPO}:${tag}"
        docker push ${REPO}:${tag}
    - if: ${{ github.event.release.prerelease) }}
      run: |
        REPO=esphome/esphome

        docker manifest create ${REPO}:beta \
          ${REPO}-aarch64:beta \
          ${REPO}-amd64:beta \
          ${REPO}-armv7:beta \
          ${REPO}-i386:beta
        echo "Pushing to ${REPO}:beta"
        docker push ${REPO}:beta
    - if: ${{ !github.event.release.prerelease) }}
      run: |
        REPO=esphome/esphome

        docker manifest create ${REPO}:latest \
          ${REPO}-aarch64:latest \
          ${REPO}-amd64:latest \
          ${REPO}-armv7:latest \
          ${REPO}-i386:latest
        echo "Pushing to ${REPO}:latest"
        docker push ${REPO}:latest
