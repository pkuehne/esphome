name: Publish dev releases to docker hub

on:
  push:
    branches:
    - dev

jobs:
  lint-cpp:
    runs-on: ubuntu-latest
    # cpp lint job runs with esphome-lint docker image so that clang-format-*
    # doesn't have to be installed
    container: esphome/esphome-lint:dev
    steps:
      - uses: actions/checkout@v2
      # Cache platformio intermediary files (like libraries etc)
      # Note: platformio platform versions should be cached via the esphome-lint image
      - name: Cache Platformio
        uses: actions/cache@v1
        with:
          path: .pio
          key: lint-cpp-pio-${{ hashFiles('platformio.ini') }}
          restore-keys: |
            lint-cpp-pio-
      # Set up the pio project so that the cpp checks know how files are compiled
      # (build flags, libraries etc)
      - name: Set up platformio environment
        run: pio init --ide atom

      # Run the test suite; all together in release workflows because latency of partial
      # results is not an issue
      - name: Run clang-tidy
        run: script/clang-tidy --all-headers --fix
      - name: Run clang-format
        run: script/clang-format -i
      - name: Suggest changes
        run: script/ci-suggest-changes

  lint-python:
    # Don't use the esphome-lint docker image because it may contain outdated requirements.
    # This way, all dependencies are cached via the cache action.
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Cache pip modules
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: esphome-pip-3.7-${{ hashFiles('setup.py') }}
          restore-keys: |
            esphome-pip-
      - name: Set up python environment
        run: script/setup

      - name: Lint Custom
        run: script/ci-custom.py
      - name: Lint Python
        run: script/lint-python

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
          test:
          - test1
          - test2
          - test3
          - test4
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Cache pip modules
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: esphome-pip-3.7-${{ hashFiles('setup.py') }}
          restore-keys: |
            esphome-pip-
      # Use per test platformio cache because tests have different platform versions
      - name: Cache ~/.platformio
        uses: actions/cache@v1
        with:
          path: ~/.platformio
          key: test-home-platformio-${{ matrix.test }}-${{ hashFiles('esphome/core_config.py') }}
          restore-keys: |
            test-home-platformio-${{ matrix.test }}-
      # Cache the intermediary build files
      - name: Cache Test Build
        uses: actions/cache@v1
        with:
          path: |
            tests/build/${{ matrix.test }}
          key: test-pio-${{ matrix.test }}-${{ hashFiles('esphome/core_config.py') }}-${{ hashFiles('esphome/**') }}
          restore-keys: |
            test-pio-${{ matrix.test }}-${{ hashFiles('esphome/core_config.py') }}
            test-pio-${{ matrix.test }}-
      - name: Set up environment
        run: script/setup

      - run: esphome tests/${{ matrix.test }}.yaml compile

  deploy-docker:
    name: Build and publish docker containers
    runs-on: ubuntu-latest
    needs: [lint-cpp, lint-python, test]
    strategy:
      matrix:
        arch: [amd64, i386, armv7, aarch64]
        build_type: ["hassio", "docker"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up env variables
        run: |
          tag="dev"
          base_version="2.0.1"

          if [[ "${{ matrix.build_type }}" == "hassio" ]]; then
            build_from="esphome/esphome-hassio-base-${{ matrix.arch }}:${base_version}"
            build_to="esphome/esphome-hassio-${{ matrix.arch }}"
            dockerfile="docker/Dockerfile.hassio"
          else
            build_from="esphome/esphome-base-${{ matrix.arch }}:${base_version}"
            build_to="esphome/esphome-${{ matrix.arch }}"
            dockerfile="docker/Dockerfile"
            if [[ "${{ matrix.arch }}" == "amd64" ]]; then
              build_to="esphome/esphome"
            fi
          fi

          # Set env variables so these values don't need to be calculated again
          echo "::set-env name=TAG::${tag}"
          echo "::set-env name=BUILD_FROM::${build_from}"
          echo "::set-env name=BUILD_TO::${build_to}"
          echo "::set-env name=IMAGE::${build_to}:${tag}"
          echo "::set-env name=DOCKERFILE::${dockerfile}"
      - name: Register QEMU binfmt
        run: docker run --rm --privileged multiarch/qemu-user-static:5.0.0-2 --reset -p yes
      - run: |
          docker build \
            --build-arg "BUILD_FROM=${BUILD_FROM}" \
            --build-arg "BUILD_VERSION=${TAG}" \
            --tag "${IMAGE}" \
            --file "${DOCKERFILE}" \
            .
      - name: Log in to docker hub
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: docker login -u "${DOCKER_USER}" -p "${DOCKER_PASSWORD}"
      - run: docker push "${IMAGE}"

  deploy-docker-manifest:
    runs-on: ubuntu-latest
    needs: [deploy-docker]
    steps:
    - name: Enable experimental manifest support
      run: |
        mkdir -p ~/.docker
        echo "{\"experimental\": \"enabled\"}" > ~/.docker/config.json
    - name: Log in to docker hub
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: docker login -u "${DOCKER_USER}" -p "${DOCKER_PASSWORD}"
    - name: "Create the manifest"
      run: |
        REPO=esphome/esphome
        tag=dev

        docker manifest create ${REPO}:${tag} \
          ${REPO}-aarch64:${tag} \
          ${REPO}-amd64:${tag} \
          ${REPO}-armv7:${tag} \
          ${REPO}-i386:${tag}
    - run: docker push ${REPO}:${tag}
